import Docs from '../../../../components/Docs/Docs'
import Highlight from 'react-highlight.js'


export default () => {
    return(
        <Docs>
            <div className="container">
                <h1>Динамические маршруты</h1>
             
Определение маршрутов с использованием заранее определенных путей не всегда достаточно для сложных приложений. В Next.js вы можете добавить скобки к странице ( [param]) для создания динамического маршрута (он же ярлыки URL-адресов, красивые URL-адреса и другие).

<p>
Рассмотрим следующую страницу pages/post/[pid].js:
</p>
<Highlight language="javascript">
    {`import { useRouter } from 'next/router'

const Post = () => {
  const router = useRouter()
  const { pid } = router.query

  return <p>Post: {pid}</p>
}

export default Post`}
</Highlight>

Любой маршрут, например /post/1, /post/abcи т. Д., Будет сопоставлен pages/post/[pid].js. Параметр согласованного пути будет отправлен на страницу в качестве параметра запроса и будет объединен с другими параметрами запроса.
<p>
Например, у маршрута /post/abc будет такой query объект:
</p>

<Highlight language="json">
    {`{ "pid": "abc" }`}
</Highlight>

<p>
 Точно так же у маршрута /post/abc?foo=bar будет следующий query объект:   
</p>

<Highlight language="json">
    {`{ "foo": "bar", "pid": "abc" }`}
</Highlight>

Однако параметры маршрута переопределяют параметры запроса с тем же именем. Например, у маршрута /post/abc?pid=123будет такой queryобъект:
<Highlight language="json">
    {`{ "pid": "abc" }`}
</Highlight>

Аналогичным образом работают несколько сегментов динамического маршрута. Страница pages/post/[pid]/[comment].jsбудет соответствовать маршруту, /post/abc/a-commentи ее queryобъект будет:
<Highlight language="json">
    {`{ "pid": "abc", "comment": "a-comment" }`}
</Highlight>

Примечание. Переходы на стороне клиента к динамическому маршруту (включая захват всех маршрутов ) можно обрабатывать с помощью next/link. Прочтите нашу документацию о связывании страниц, чтобы узнать больше.

<h3>Поймать все маршруты</h3>

Динамические маршруты можно расширить, чтобы охватить все пути, добавив три точки ( ...) в скобки. Например:
<p className='list'>
 - pages/post/[...slug].jsспички /post/a, но также /post/a/b, /post/a/b/cи так далее.  
</p>

<div className="note">Примечание. Вы можете использовать другие имена slug, например:[...param]</div>

Соответствующие параметры будут отправлены slugна страницу как параметр запроса ( в примере), и это всегда будет массив, поэтому путь /post/aбудет иметь следующий queryобъект:
<Highlight language="json">
    {`{ "slug": ["a"] }`}
</Highlight>

И в случае /post/a/b, и любого другого совпадающего пути к массиву будут добавлены новые параметры, например:
<Highlight language="json">
    {`{ "slug": ["a", "b"] }`}
</Highlight>

<h3>Необязательно поймать все маршруты</h3>

Поймать все маршруты можно сделать необязательными, включив параметр в двойные скобки ( [[...slug]]).
<p>
Например, pages/post/[[...slug]].js будет соответствовать /post, /post/a, /post/a/b и так далее.
</p>

Основное различие между маршрутами catch all и optional catch all заключается в том, что с optional маршрут без параметра также сопоставляется ( /post в примере выше).

<p>Эти query объекты являются следующими:</p>


<Highlight language="json">
    {`{ } // GET '/post' (empty object)
{ "slug": ["a"] } // 'GET /post/a' (single-element array)
{ "slug": ["a", "b"] } // 'GET /post/a/' (multi-element array)`}
</Highlight>

Хорошим примером необязательного перехвата всех маршрутов являются документы Next.js, единственная страница с именем pages / docs / [[... slug]]. Js заботится обо всех документах, которые вы просматриваете в данный момент.

<h2>Предостережения</h2>

Предопределенные маршруты имеют приоритет над динамическими маршрутами, а динамические маршруты имеют приоритет над всеми маршрутами. Взгляните на следующие примеры:
<p className='list'> - pages/post/create.js - Подойдет /post/create</p>
<p className='list'> - pages/post/[pid].js- Будет соответствовать /post/1, /post/abc и т.д. Но не /post/create</p>
<p className='list'> - pages/post/[...slug].js- Будет соответствовать /post/1/2, /post/a/b/c и т.д. Но не /post/create,/post/abc</p>

<p>
 - Страницы, статически оптимизированные с помощью автоматической статической оптимизации, будут гидратированы без указания параметров маршрута, то есть query будут пустым объектом ({}).
</p>


 - При маршрутизации к динамическому маршруту с использованием Link или router вам нужно будет указать в href качестве динамического маршрута, например, /post/[pid] и as в качестве декоратора для URL-адреса, например /post/abc.
<p>
После гидратации Next.js запустит обновление вашего приложения, чтобы предоставить параметры маршрута в query объекте.
</p>
            </div>
        </Docs>
    )
}
