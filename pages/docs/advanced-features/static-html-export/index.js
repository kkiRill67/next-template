import Docs from '../../../../components/Docs/Docs'
import Highlight from 'react-highlight.js'

export default function Index(props) {

    return(
        <Docs>
            <div className="container">
                <h1>Статический экспорт HTML</h1>
           
next export позволяет экспортировать приложение в статический HTML, который можно запускать автономно без необходимости использования сервера Node.js.

<p>
Экспортированное приложение поддерживает почти все функции Next.js, включая динамические маршруты, предварительную выборку, предварительную загрузку и динамический импорт.
</p>

next export работает путем предварительной визуализации всех страниц в HTML. Для динамических маршрутов ваша страница может экспортировать getStaticPathsфункцию, чтобы экспортер узнал, какие HTML-страницы генерировать для этого маршрута.
<p></p>
<div className="note">
next export предназначен для сценариев, в которых ни одна из ваших страниц не имеет требований к данным на стороне сервера или инкрементным данным (хотя статически отрисованные страницы все равно могут получать данные на стороне клиента ).
<p>
Если вы хотите создать гибридный сайт, на котором только некоторые страницы предварительно обрабатываются в статическом HTML, Next.js уже сделает это автоматически! Прочтите об автоматической статической оптимизации, чтобы узнать подробности.
</p>
next export также вызывает отключение таких функций, как добавочная статическая генерация и регенерация, если они требуют, next start или бессерверное развертывание для работы.
</div>

<h2>Как это использовать</h2>

Разрабатывайте свое приложение, как обычно, с Next.js. Затем запустите:

<Highlight language="node">
{`next build && next export`}
</Highlight>

Для этого вы можете обновить скрипты в своем package.json:

<Highlight language="json">
{`"scripts": {
  "build": "next build && next export"
}`}
</Highlight>

И запустите его с помощью:

<Highlight language="node">
{`npm run build`}
</Highlight>

<p>Тогда у вас будет статическая версия вашего приложения в out каталоге.</p>

По умолчанию next export не требует настройки. Он будет выводить статический HTML-файл для каждой страницы в вашем pagesкаталоге (или более для динамических маршрутов , где он будет вызывать getStaticPathsи генерировать страницы в зависимости от результата). Для более сложных сценариев вы можете определить параметр, вызываемый exportPathMapв вашем next.config.jsфайле, чтобы точно настроить, какие страницы будут создаваться.

<h2>Развертывание</h2>

По умолчанию next export создается out каталог, который может обслуживаться любой службой статического хостинга или CDN.
<p></p>
<div className="note">
Мы настоятельно рекомендуем использовать Vercel, даже если ваше приложение Next.js полностью статично. Vercel оптимизирован, чтобы делать статические приложения Next.js невероятно быстрыми. next export работает с развертываниями Zero Config на Vercel.
</div>

<h2>Предостережения</h2>

 - С помощью next exportмы создаем HTML-версию вашего приложения. Во время экспорта мы вызываем getStaticPropsкаждую страницу, которая ее экспортирует, и передаем результат компоненту страницы. getInitialPropsВместо этого также можно использовать более старый API getStaticProps, но с некоторыми оговорками:

<p className="list">
 - getInitialProps не может использоваться рядом getStaticProps или getStaticPaths на любой странице. Если у вас есть динамические маршруты, вместо использования getStaticPaths вам необходимо настроить exportPathMap параметр в next.config.js файле, чтобы экспортер знал, какие файлы HTML он должен выводить.
</p>
<p className="list">
 - Когда getInitialPropsвызывается во время экспорта, поля req и res его context параметра будут пустыми объектами, так как во время экспорта сервер не работает.
</p>
<p className="list">
 - getInitialProps будет вызываться при каждой навигации на стороне клиента, если вы хотите получать данные только во время сборки, переключитесь на getStaticProps.
</p>
<p className="list">
 - getInitialProps должен извлекаться из API и не может использовать библиотеки, специфичные для Node.js, или файловую систему, например getStaticProps.
</p>
По возможности рекомендуется использовать и переходить на getStaticProps более getInitialProps высокий уровень.
<p>
 - fallback: trueРежим getStaticPaths не поддерживается при использовании next export.
</p>

 - Маршруты API не поддерживаются этим методом, потому что они не могут быть предварительно преобразованы в HTML.
<p>
 - getServerSideProps не может использоваться на страницах, потому что для этого метода требуется сервер. Рассмотрите возможность использования getStaticProps вместо этого.
</p>
            </div>
        </Docs>
    )
}